// Connexion MongoDB
// =================

import chalk from 'chalk-template'
import mongoose from 'mongoose'

// ChaÃ®ne URL de connexion
// -----------------------

const url =
  // PrioritÃ© absolue Ã  la globale explicite (environnement de test dÃ©diÃ© dans
  // JEST, plus important que la config Ã©ventuelle de dev / cloud).
  global.MONGODB_URI ||
  // Sinon, prioritÃ© Ã  la variable dâ€™environnement (dotenv Ã©ventuel en dev,
  // clouds / hÃ©bergeurs)
  process.env.MONGODB_URI ||
  // En dernier recours, donc sous-entendu en dev sans dotenv, base Mongo
  // locale, non-authentifiÃ©e, sur le port par dÃ©faut.
  'mongodb://localhost:27017/toptunez'

// Connexion automatique
// ---------------------
//
// Le simple fait de requÃ©rir ce module active la connexion, ce qui est
// notamment trÃ¨s pratique pour les tests, chaque modÃ¨le utilisant explicitement
// ce module. Le paramÃ¨tre de *timeout* de connexion est ici spÃ©cifiquement calÃ©
// pour le dev et les tests, mais ne pose pas de souci en production.
const connection = mongoose.createConnection(url, { connectTimeoutMS: 5000 })

// Logs de connexion / dâ€™erreur
// ----------------------------

if (process.env.NODE_ENV !== 'test') {
  // Inutile de pourrir lâ€™affichage des tests avec le log de connexion Ã  la
  // baseâ€¦
  connection.on('open', () => {
    console.log(
      chalk`{green âœ…  Connected to mongoDB database ${connection.name}}`
    )
  })
}

// En revanche, loguer une erreur de connexion est utile dans tous les casÂ !
connection.on('error', () => {
  console.error(
    chalk`{red ğŸ”¥  Could not connect to mongoDB database ${connection.name}}`
  )
})

// Export par dÃ©faut du moduleÂ : la connexion elle-mÃªme.
export default connection
