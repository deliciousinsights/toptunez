// Serveur frontal GraphQL
// =======================

import { ApolloServer } from '@apollo/server'
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'
import bodyParser from 'body-parser'
import chalk from 'chalk-template'
import cors from 'cors'
import { createServer } from 'http'
import express from 'express'
import { expressMiddleware } from '@apollo/server/express4'

import {
  apolloHSTS,
  DEFAULT_CORS_OPTIONS as corsConfig,
} from './util/middlewares.js'
import { buildSchema, validationRules } from './schema/index.js'
import connection from './db/connection.js'
import { getUserFromReq } from './util/graphql-jwt.js'

// Par dÃ©faut, notre serveur 100% GraphQL ouvre sur le port 3001, Ã  la racine du
// domaine.
const PORT = process.env.PORT || 3001

// Sans base, point de salutÂ : on conditionne lâ€™Ã©coute HTTP Ã  la bonne connexion
// Ã  la base MongoDB.
connection.on('open', initServer)

// Graceful shutdown
// -----------------
//
// Une fois le serveur lancÃ©, on rÃ©agit avec ce gestionnaire au signal SIGTERM,
// qui nous serait envoyÃ© par lâ€™environnement dâ€™hÃ©bergement pours demander un
// arrÃªt propre et rapide, par exemple dans le cadre dâ€™une reconfiguration
// Ã©lastique.
async function cleanUp(server) {
  console.log(chalk`{cyan TopTunez GraphQL server shutting downâ€¦}`)
  // On commence par fermer la socket dâ€™Ã©coute, afin de ne plus accepter de
  // requÃªte HTTP entranteÂ ; on traite toujours celles dÃ©jÃ  acceptÃ©es et en
  // cours.
  await server.stop()
  // On peut ensuite attendre la fermeture de la connexion MongoDBÂ ; idem,
  // celle-ci attendra que ses requÃªtes en cours soient terminÃ©es.
  await connection.close()
  console.log(chalk`{green TopTunez GraphQL server shutdown complete}`)
}

// Lancement du serveur Apollo
// ---------------------------
//
// Câ€™est ici quâ€™on configure le serveur et quâ€™on active lâ€™Ã©coute HTTP.  Une fois
// Ã©tabli, il inscrit aussi le gestionnaire de *graceful shutdown* (qui nâ€™a pas
// dâ€™utilitÃ© avant cela).
async function initServer() {
  const expressApp = express()
  const httpServer = createServer(expressApp)
  // Pour plus de dÃ©tails sur les options autorisÃ©es par le serveur Apollo,
  // [consultez la doc
  // dÃ©diÃ©e](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#options).
  const options = {
    schema: buildSchema(),
    plugins: [
      apolloHSTS(),
      new ApolloServerPluginDrainHttpServer({ httpServer }),
    ],
    validationRules,
  }

  const server = new ApolloServer(options)
  await server.start()

  expressApp.use(
    '/graphql',
    cors(corsConfig),
    bodyParser.json(),
    expressMiddleware(server, { context: getUserFromReq })
  )
  // Et hop, Ã©coute HTTPÂ !
  await new Promise((resolve) => httpServer.listen({ port: PORT }, resolve))
  console.log(
    chalk`ðŸš€  {green TopTunez GraphQL server ready at} {cyan.underline http://localhost:${PORT}/graphql}`
  )

  // Graceful shutdown
  process.on('SIGTERM', () => cleanUp(server))
  process.on('SIGINT', () => cleanUp(server))
}
